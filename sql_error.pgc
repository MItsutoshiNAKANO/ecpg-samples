/// @file
/// @brief ECPG error handling samples.
/// @copyright
///   (C) 2024 Mitsutoshi Nakano <ItSANgo@gmail.com>
///   SPDX-License-Identifier: GPL-3.0-or-later

#include <err.h>
#include <stdarg.h>

#include "sql_error.h"

/// @brief Print the warning message.
/// @param file The file name.
/// @param line The line number.
/// @param func The function name.
/// @param fmt The format string.
/// @param ap The arguments.
/// @see https://www.postgresql.org/docs/16/ecpg-errors.html#ECPG-SQLCA
/// @see https://www.postgresql.org/docs/16/errcodes-appendix.html
void
vsql_warn(
    const char *file, long line, const char *func, const char *fmt, va_list ap)
{
    vwarnx(fmt, ap);
    warnx("in %s:%ld:%s()", file, line, func);

    warnx("==== sqlca ====");
    warnx("sqlcode: %ld", sqlca.sqlcode);
    warnx("sqlerrm.sqlerrml: %d", sqlca.sqlerrm.sqlerrml);
    warnx("sqlerrm.sqlerrmc: %s", sqlca.sqlerrm.sqlerrmc);
    warnx(
        "sqlerrd: %ld %ld %ld %ld %ld %ld", sqlca.sqlerrd[0], sqlca.sqlerrd[1],
        sqlca.sqlerrd[2], sqlca.sqlerrd[3], sqlca.sqlerrd[4], sqlca.sqlerrd[5]);
    warnx(
        "sqlwarn: %d %d %d %d %d %d %d %d", sqlca.sqlwarn[0], sqlca.sqlwarn[1],
        sqlca.sqlwarn[2], sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],
        sqlca.sqlwarn[6], sqlca.sqlwarn[7]);
    warnx("sqlstate: %5s", sqlca.sqlstate);
    warnx("===============");
    warnx(
        "@see https://www.postgresql.org/docs/16/ecpg-errors.html#ECPG-SQLCA");
    warnx("@see https://www.postgresql.org/docs/16/errcodes-appendix.html");
}

/// @brief Print the warning message.
/// @param file The file name.
/// @param line The line number.
/// @param func The function name.
/// @param fmt The format string.
/// @param ... The arguments.
void
sql_warn(const char *file, long line, const char *func, const char *fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);
    vsql_warn(file, line, func, fmt, ap);
    va_end(ap);
}

/// @brief Print the error message and exit.
/// @param file The file name.
/// @param line The line number.
/// @param func The function name.
/// @param exit_status The exit status.
/// @param fmt The format string.
/// @param ... The arguments.
[[noreturn]] void
sql_error(
    const char *file, long line, const char *func, int exit_status,
    const char *fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);
    vsql_warn(file, line, func, fmt, ap);
    verrx(exit_status, fmt, ap);
    va_end(ap);
}
